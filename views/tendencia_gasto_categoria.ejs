<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <title><%= analysisTitle %> · <%= categoryName %> · FinAi</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <style>
    /* ===== Base (modo claro, A4, tipografía) ===== */
    @page { size: A4; margin: 20mm; }
    :root{
      --bg: #FFFFFF;
      --surface: #F7F8FA;
      --text: #0F172A;
      --muted: #475569;
      --border: #E5E7EB;
      --grid: #EEF1F4;
      --accent: #007AFF;
      --green: #16A34A;
      --red: #FF5A5F;
      --shadow-sm: 0 1px 2px rgba(16,24,40,0.06), 0 1px 3px rgba(16,24,40,0.08);
    }
    *{ box-sizing: border-box; -webkit-print-color-adjust: exact; print-color-adjust: exact; }
    html, body{ height: 100%; }
    body{
      margin: 0;
      background: var(--bg);
      color: var(--text);
      font: 400 11pt/1.55 "Inter", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", Helvetica, sans-serif;
      -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
    }

    .page{ max-width: 800px; margin: 0 auto; padding: 8px 0 16px; }

    /* ===== Cabecera ===== */
    .header{
      margin-bottom: 8px; padding-bottom: 10px;
      border-bottom: 1px solid var(--border);
      display: flex; align-items: baseline; justify-content: space-between; gap: 12px; flex-wrap: wrap;
    }
    .title{
      margin: 0; font-size: 18pt; font-weight: 800; line-height: 1.2;
    }
    .subtitle{
      margin: 0; font-size: 11pt; color: var(--muted);
    }

    /* ===== Tarjeta del gráfico ===== */
    .chart-card{
      background: var(--surface);
      border: 1px solid var(--border);
      border-radius: 12px;
      box-shadow: var(--shadow-sm);
      padding: 16px;
      margin-top: 12px;
    }
    .chart-head{
      display: flex; justify-content: space-between; align-items: center; gap: 12px; margin-bottom: 8px;
    }
    .legend{ display: inline-flex; gap: 12px; align-items: center; font-size: 10pt; color: var(--muted); }
    .legend-item{ display: inline-flex; gap: 6px; align-items: center; }
    .legend-swatch{ width: 12px; height: 12px; border-radius: 3px; display: inline-block; background: var(--red); }

    /* Accesibilidad */
    .sr-only{
      position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0;
    }
  </style>
</head>
<body>
  <div class="page">
    <!-- ===== Cabecera ===== -->
    <header class="header" role="banner">
      <h1 class="title"><%= analysisTitle %></h1>
      <p class="subtitle">
        <% 
          const _labelsPreview = Array.isArray(labels) ? labels : [];
          const _sub = _labelsPreview.length >= 2
            ? (_labelsPreview[0] + ' — ' + _labelsPreview[_labelsPreview.length - 1])
            : (typeof period !== 'undefined' && period ? period : 'Últimos 12 meses');
        %>
        <%= _sub %> · <%= (typeof categoryName !== 'undefined' && categoryName) ? categoryName : '' %>
      </p>
    </header>

    <!-- ===== Helpers EJS ===== -->
    <%
      // Formato de cantidades (sin símbolo de moneda para mantenerlo genérico)
      const _locale = 'es-ES';
      const fmt = (n) => {
        try { return new Intl.NumberFormat(_locale, { maximumFractionDigits: 0 }).format(Number(n)||0); }
        catch { return String(Math.round(Number(n)||0)); }
      };

      // Datos
      const L = Array.isArray(labels) ? labels.map(String) : [];
      const ds = Array.isArray(datasets) ? datasets : [];
      const series = (ds.find(d => /gasto|restauran|categor/i.test(String(d?.label||'')))?.data ?? ds[0]?.data ?? []).map(Number);

      // Normalización
      const N = Math.max(L.length, series.length);
      const months = (L.length ? L : Array.from({length: N || 1}, (_,i)=>`Mes ${i+1}`)).slice(0, Math.max(N,1));
      const data = (series.length ? series : Array.from({length: N || 1}, ()=>0)).slice(0, months.length);

      // Rangos Y con padding y base en cero si procede
      const minY = Math.min(...data);
      const maxY = Math.max(...data);
      const span = Math.max(1, maxY - minY);
      const pad = Math.max(1, span * 0.1);
      let yMin = Math.min(0, minY - pad); // aseguramos que 0 esté incluido si datos positivos
      let yMax = maxY + pad;
      const range = Math.max(1, yMax - yMin);

      // Ticks agradables
      function niceStep(r){
        const raw = r / 4;
        const pow = Math.pow(10, Math.floor(Math.log10(raw)));
        const n = raw / pow;
        let s = 1;
        if (n <= 1) s = 1;
        else if (n <= 2) s = 2;
        else if (n <= 5) s = 5;
        else s = 10;
        return s * pow;
      }
      const step = niceStep(range);
      const ticks = [];
      let t = Math.floor(yMin / step) * step;
      while (t <= yMax + 0.5*step) { ticks.push(t); t += step; }

      // Dimensiones del SVG
      const SVG_W = 760, SVG_H = 320;
      const M_LEFT = 56, M_RIGHT = 12, M_TOP = 8, M_BOTTOM = 36;
      const CH_W = SVG_W - M_LEFT - M_RIGHT;
      const CH_H = SVG_H - M_TOP - M_BOTTOM;

      // Escalas
      const xStep = (months.length > 1) ? (CH_W / (months.length - 1)) : 0;
      const xAt = (i) => M_LEFT + i * xStep;
      const yAt = (v) => M_TOP + CH_H * (1 - ((v - yMin) / range));

      // Generación de path (Catmull-Rom -> Bézier) para suavizar
      function linePath(points){
        if (points.length === 1) {
          const [p] = points;
          return `M ${p.x} ${p.y} L ${p.x} ${p.y}`;
        }
        const cps = [];
        for (let i=0; i<points.length-1; i++){
          const p0 = points[i-1] || points[i];
          const p1 = points[i];
          const p2 = points[i+1];
          const p3 = points[i+2] || p2;
          const c1x = p1.x + (p2.x - p0.x) / 6;
          const c1y = p1.y + (p2.y - p0.y) / 6;
          const c2x = p2.x - (p3.x - p1.x) / 6;
          const c2y = p2.y - (p3.y - p1.y) / 6;
          cps.push({c1x, c1y, c2x, c2y});
        }
        let d = `M ${points[0].x} ${points[0].y}`;
        for (let i=0; i<points.length-1; i++){
          const p = points[i+1], c = cps[i];
          d += ` C ${c.c1x} ${c.c1y} ${c.c2x} ${c.c2y} ${p.x} ${p.y}`;
        }
        return d;
      }

      const pts = data.map((v,i)=>({ x: xAt(i), y: yAt(v), v, i }));
      const dLine = linePath(pts);

      // Área bajo la línea (base en cero si está en rango; si no, usa yMin)
      const baseVal = 0 >= yMin && 0 <= yMax ? 0 : yMin;
      const areaStart = `M ${pts[0].x} ${yAt(baseVal)}`;
      const areaMid = dLine.replace(/^M [\d.\-]+ [\d.\-]+/, `L ${pts[0].x} ${pts[0].y}`);
      const areaEnd = `L ${pts[pts.length-1].x} ${yAt(baseVal)} Z`;
      const dArea = areaStart + areaMid + areaEnd;
    %>

    <!-- ===== Gráfico de línea ===== -->
    <section class="chart-card" aria-labelledby="chartTitle">
      <div class="chart-head">
        <h2 id="chartTitle" class="sr-only">Tendencia de gasto mensual en la categoría seleccionada</h2>
        <div class="legend" aria-label="Leyenda del gráfico">
          <span class="legend-item"><span class="legend-swatch"></span><%= (typeof categoryName !== 'undefined' && categoryName) ? categoryName : (datasets?.[0]?.label || 'Gasto') %></span>
        </div>
      </div>

      <% if (!data.length) { %>
        <div style="padding:20px; color: var(--muted); text-align:center;">Sin datos para mostrar.</div>
      <% } else { %>
      <svg viewBox="0 0 <%= SVG_W %> <%= SVG_H %>" width="100%" height="auto" role="img" aria-label="Gráfico de línea de gasto mensual">
        <defs>
          <!-- Degradado del área (tono de gasto) -->
          <linearGradient id="areaFillCat" x1="0" y1="0" x2="0" y2="1">
            <stop offset="0%" stop-color="#FF5A5F" stop-opacity="0.25"/>
            <stop offset="100%" stop-color="#FF5A5F" stop-opacity="0.02"/>
          </linearGradient>
          <!-- Sombra suave de la línea -->
          <filter id="glowCat" x="-50%" y="-50%" width="200%" height="200%">
            <feGaussianBlur in="SourceGraphic" stdDeviation="1.1" result="blur"/>
            <feMerge>
              <feMergeNode in="blur"/>
              <feMergeNode in="SourceGraphic"/>
            </feMerge>
          </filter>
        </defs>

        <!-- Grid horizontal y etiquetas Y -->
        <g>
          <% ticks.forEach(val => { 
               const y = yAt(val);
          %>
            <line x1="<%= M_LEFT %>" y1="<%= y %>" x2="<%= SVG_W - M_RIGHT %>" y2="<%= y %>"
                  stroke="var(--grid)" stroke-width="1" />
            <text x="<%= M_LEFT - 8 %>" y="<%= y %>" text-anchor="end" dominant-baseline="middle"
                  fill="var(--muted)" font-size="10"><%= fmt(val) %></text>
          <% }) %>
        </g>

        <!-- Etiquetas X -->
        <g>
          <% months.forEach((m, i) => { 
               const x = xAt(i);
          %>
            <text x="<%= x %>" y="<%= SVG_H - 16 %>" text-anchor="middle"
                  fill="var(--muted)" font-size="10"><%= m %></text>
          <% }) %>
        </g>

        <!-- Área -->
        <path d="<%= dArea %>" fill="url(#areaFillCat)"></path>

        <!-- Línea principal -->
        <path d="<%= dLine %>" fill="none" stroke="var(--red)" stroke-width="2.5" filter="url(#glowCat)"></path>

        <!-- Puntos -->
        <g>
          <% pts.forEach(p => { %>
            <circle cx="<%= p.x %>" cy="<%= p.y %>" r="3.2" fill="#FFFFFF" stroke="var(--red)" stroke-width="2">
              <title><%= months[p.i] %>: <%= fmt(p.v) %></title>
            </circle>
          <% }) %>
        </g>

        <!-- Eje X base -->
        <line x1="<%= M_LEFT %>" y1="<%= M_TOP + CH_H %>" x2="<%= SVG_W - M_RIGHT %>" y2="<%= M_TOP + CH_H %>"
              stroke="var(--border)" stroke-width="1" />
      </svg>
      <% } %>
    </section>
  </div>
</body>
</html>
