<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <title><%= analysisTitle %> · FinAi</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <style>
    /* ===== Base (modo claro, A4, tipografía) ===== */
    @page { size: A4; margin: 20mm; }
    :root{
      --bg: #FFFFFF;
      --surface: #F7F8FA;
      --text: #0F172A;
      --muted: #475569;
      --border: #E5E7EB;
      --accent: #007AFF;
      --green: #16A34A;
      --amber: #F59E0B;
      --red: #FF5A5F;
      --shadow-sm: 0 1px 2px rgba(16,24,40,0.06), 0 1px 3px rgba(16,24,40,0.08);
    }
    *{ box-sizing: border-box; -webkit-print-color-adjust: exact; print-color-adjust: exact; }
    html, body{ height: 100%; }
    body{
      margin: 0;
      background: var(--bg);
      color: var(--text);
      font: 400 11pt/1.55 "Inter", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", Helvetica, sans-serif;
      -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
    }

    .page{ max-width: 800px; margin: 0 auto; padding: 8px 0 16px; }

    /* ===== Cabecera ===== */
    .header{
      margin-bottom: 8px; padding-bottom: 10px;
      border-bottom: 1px solid var(--border);
      display: flex; align-items: baseline; justify-content: space-between; gap: 12px; flex-wrap: wrap;
    }
    .title{
      margin: 0; font-size: 18pt; font-weight: 800; line-height: 1.2;
    }
    .subtitle{
      margin: 0; font-size: 11pt; color: var(--muted);
    }

    /* ===== Grid de tarjetas ===== */
    .grid{
      display: grid; gap: 12px;
      grid-template-columns: 1fr;
      margin-top: 12px;
    }
    @media (min-width: 720px){
      .grid{ grid-template-columns: 1fr 1fr; }
    }

    /* ===== Tarjeta de meta ===== */
    .card{
      background: var(--surface);
      border: 1px solid var(--border);
      border-radius: 12px;
      box-shadow: var(--shadow-sm);
      padding: 14px;
      display: grid;
      grid-template-columns: 1fr auto;
      grid-auto-rows: min-content;
      gap: 10px 12px;
      align-items: start;
    }
    .name{
      margin: 0; font-size: 13pt; font-weight: 800; color: var(--text);
    }
    .badge{
      border: 1px solid var(--border); background: #FFFFFF;
      padding: 3px 8px; border-radius: 999px; font-weight: 600; font-size: 10pt; color: var(--muted);
    }
    .badge.done{ color: var(--green); border-color: #BBF7D0; background: #F0FDF4; }
    .badge.risk{ color: #92400E; border-color: #FDE68A; background: #FFFBEB; }
    .badge.slow{ color: var(--muted); }
    .badge.block{
      grid-column: 1 / -1;
      justify-self: start;
      margin-top: -4px;
    }

    .meta{
      grid-column: 1 / -1;
      color: var(--muted); font-size: 10.5pt;
      display: flex; gap: 12px; flex-wrap: wrap;
    }
    .meta strong{ color: var(--text); }

    /* ===== Barra de progreso ===== */
    .bar{
      grid-column: 1 / -1;
      position: relative;
      width: 100%; height: 16px;
      background: #FFFFFF;
      border: 1px solid var(--border);
      border-radius: 999px;
      overflow: hidden;
    }
    .fill{
      position: absolute; left: 0; top: 0; bottom: 0;
      width: 0%;
      background: linear-gradient(90deg, var(--accent), #4CA9FF);
      border-right: 1px solid rgba(0,0,0,0.05);
    }
    .fill.done{ background: linear-gradient(90deg, var(--green), #34D399); }

    .row{
      grid-column: 1 / -1;
      display: flex; justify-content: space-between; align-items: center;
      margin-top: 6px; font-size: 10.5pt; color: var(--muted);
      gap: 12px; flex-wrap: wrap;
    }
    .row strong{ color: var(--text); }
    .pct{ font-weight: 800; color: var(--text); }

    .eta{
      display: flex; flex-direction: column; gap: 2px; align-items: flex-end;
      font-size: 10.5pt; color: var(--muted);
    }
    .eta strong{ color: var(--text); }

    /* Nota inferior */
    .note{
      margin-top: 12px; color: var(--muted); font-size: 10pt;
    }

    /* Accesibilidad */
    .sr-only{
      position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0;
    }
  </style>
</head>
<body>
  <div class="page">
    <!-- ===== Cabecera ===== -->
    <header class="header" role="banner">
      <h1 class="title"><%= analysisTitle %></h1>
      <p class="subtitle">Proyecciones basadas en el ritmo de ahorro actual</p>
    </header>

    <!-- ===== Helpers EJS ===== -->
    <%
      const _locale = 'es-ES';
      const _currency = (typeof currency !== 'undefined' && currency) ? currency : 'EUR';

      const money = (n, frac=2) => {
        try {
          return new Intl.NumberFormat(_locale, { style: 'currency', currency: _currency, minimumFractionDigits: frac, maximumFractionDigits: frac }).format(Number(n)||0);
        } catch {
          const num = Number(n)||0;
          const sign = (num < 0) ? '-' : '';
          const abs = Math.abs(num).toFixed(frac).replace('.', ',');
          return sign + abs + ' ' + _currency;
        }
      };

      // Fecha base para proyecciones (hoy por defecto; si hay generatedAt/asOfDate, se intenta parsear)
      function parseDateLike(s){
        if (!s) return null;
        const d = new Date(s);
        return isNaN(d) ? null : d;
      }
      const baseDate = parseDateLike(typeof asOfDate !== 'undefined' ? asOfDate : (typeof generatedAt !== 'undefined' ? generatedAt : null)) || new Date();

      function addMonths(date, months){
        const d = new Date(date.getTime());
        const day = d.getDate();
        d.setMonth(d.getMonth() + months);
        if (d.getDate() < day) d.setDate(0); // ajusta fin de mes
        return d;
      }
      function formatMonthYear(d){
        try { return d.toLocaleDateString(_locale, { month: 'long', year: 'numeric' }); }
        catch { return `${d.getMonth()+1}/${d.getFullYear()}`; }
      }

      // Normaliza metas y calcula faltantes
      const raw = Array.isArray(goals) ? goals : [];
      const rows = raw.map((g, i) => {
        const target = Math.max(0, Number(g?.targetAmount) || 0);
        const current = Math.max(0, Number(g?.currentAmount) || 0);
        const remaining = Math.max(0, target - current);
        let pct = g?.percentageCompleted != null ? Number(g.percentageCompleted) : (target > 0 ? (current / target) * 100 : 0);
        pct = isFinite(pct) ? Math.max(0, pct) : 0;

        // Ritmo mensual estimado: admite múltiples alias si existen en el objeto
        const pace =
          (g?.monthlyContribution != null ? Number(g.monthlyContribution) : null) ??
          (g?.avgMonthlyContribution != null ? Number(g.avgMonthlyContribution) : null) ??
          (g?.pacePerMonth != null ? Number(g.pacePerMonth) : null) ??
          (g?.savedPerMonth != null ? Number(g.savedPerMonth) : null) ??
          (g?.savedInPeriod != null ? Number(g.savedInPeriod) : null); // si el período fuese 1 mes

        // Cálculo de fecha estimada si no viene dada y hay ritmo
        let etaLabel = (typeof g?.projectedCompletionDate === 'string' && g.projectedCompletionDate.trim())
          ? String(g.projectedCompletionDate)
          : null;

        if (!etaLabel && pace != null && isFinite(pace) && pace > 0 && remaining > 0){
          const monthsFloat = remaining / pace;
          const monthsCeil = Math.ceil(monthsFloat - 1e-9); // evita pasar al mes siguiente por flotantes
          const eta = addMonths(baseDate, monthsCeil);
          etaLabel = formatMonthYear(eta);
        }

        // Estado/badge
        const status = pct >= 100
          ? { cls: 'done', label: 'Completada' }
          : (pace && pace > 0 ? { cls: (pct >= 70 ? 'risk' : 'slow'), label: (pct >= 70 ? 'En buen camino' : 'En progreso') }
                              : { cls: 'slow', label: 'En progreso' });

        return {
          idx: i,
          name: String(g?.name || `Meta ${i+1}`),
          target, current, remaining, pct, pace: (pace && isFinite(pace) ? Math.max(0, pace) : null),
          etaLabel
        };
      });

      // Orden: primero las que están más cerca (mayor %), luego resto
      const sorted = rows.slice().sort((a,b) => b.pct - a.pct);

      const clampWidth = (pct) => Math.min(100, Math.max(0, pct));
    %>

    <!-- ===== Grid de metas ===== -->
    <main class="grid" role="list" aria-label="Proyección de metas">
      <% if (!sorted.length) { %>
        <section class="card" role="listitem">
          <h2 class="name">Sin metas</h2>
          <span class="badge block">Añade metas de ahorro para ver su fecha estimada de finalización.</span>
          <div class="bar" aria-hidden="true"><div class="fill" style="width:0%"></div></div>
          <div class="row">
            <span>Ahorrados <strong>—</strong> de <strong>—</strong></span>
            <span class="pct">0%</span>
          </div>
          <div class="eta"><span><strong>Fecha Estimada:</strong> —</span></div>
        </section>
      <% } else { 
           sorted.forEach(g => { 
             const width = clampWidth(g.pct).toFixed(1);
             const done = g.pct >= 100;
             const badge = done ? {cls:'done', label:'Completada'} : (g.pct >= 70 ? {cls:'risk', label:'En buen camino'} : {cls:'slow', label:'En progreso'});
      %>
        <section class="card" role="listitem" aria-labelledby="goal-<%= g.idx %>">
          <!-- Título + estado -->
          <h2 id="goal-<%= g.idx %>" class="name"><%= g.name %></h2>
          <span class="badge <%= badge.cls %>"><%= badge.label %></span>

          <!-- Línea de meta -->
          <div class="meta">
            <span>Objetivo: <strong><%= money(g.target) %></strong></span>
            <span>Ahorrado: <strong><%= money(g.current) %></strong></span>
            <% if (!done) { %>
              <span>Faltan: <strong><%= money(g.remaining) %></strong></span>
            <% } else { %>
              <span>Exceso: <strong><%= money(Math.max(0, g.current - g.target)) %></strong></span>
            <% } %>
            <% if (g.pace != null) { %>
              <span>Ritmo mensual estimado: <strong><%= money(g.pace) %></strong></span>
            <% } %>
          </div>

          <!-- Barra de progreso -->
          <div class="bar" aria-label="Progreso hacia la meta">
            <%= `<div class="fill ${done ? 'done' : ''}" style="width:${width}%"></div>` %>
          </div>

          <!-- Resumen y ETA -->
          <div class="row">
            <span>Ahorrados <strong><%= money(g.current) %></strong> de <strong><%= money(g.target) %></strong></span>
            <span class="pct"><%= (Math.round(g.pct * 10) / 10).toLocaleString('es-ES') %>%</span>
          </div>

          <div class="eta">
            <span><strong>Fecha Estimada:</strong> <%= done ? 'Completada' : (g.etaLabel || '—') %></span>
            <% if (!done && !g.etaLabel && (g.pace == null || g.pace <= 0)) { %>
              <span style="font-size:10pt; color:var(--muted)">Indica un ritmo mensual para estimar la fecha.</span>
            <% } %>
          </div>
        </section>
      <% }) } %>
    </main>

    <p class="note">Las fechas estimadas se calculan manteniendo el ritmo de ahorro actual. Son orientativas y pueden variar.</p>
  </div>
</body>
</html>
