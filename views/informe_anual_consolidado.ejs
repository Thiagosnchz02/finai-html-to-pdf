<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <title><%= reportTitle %> · <%= year %> · FinAi</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <style>
    /* ===== Base (modo claro, A4, tipografía) ===== */
    @page { size: A4; margin: 20mm; }
    :root{
      --bg: #FFFFFF;
      --surface: #F7F8FA;
      --text: #0F172A;
      --muted: #475569;
      --border: #E5E7EB;
      --accent: #007AFF;
      --green: #16A34A;
      --red: #FF5A5F;
      --shadow-sm: 0 1px 2px rgba(16,24,40,0.06), 0 1px 3px rgba(16,24,40,0.08);
      --grid: #EEF1F4;
    }
    *{ box-sizing: border-box; -webkit-print-color-adjust: exact; print-color-adjust: exact; }
    html, body{ height: 100%; }
    body{
      margin: 0;
      background: var(--bg);
      color: var(--text);
      font: 400 11pt/1.55 "Inter", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", Helvetica, sans-serif;
      -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
    }

    .page{ max-width: 800px; margin: 0 auto; padding: 8px 0 16px; }

    /* ===== Cabecera ===== */
    .header{
      margin-bottom: 16px; padding-bottom: 12px;
      border-bottom: 1px solid var(--border);
      display: flex; align-items: baseline; gap: 12px; justify-content: space-between; flex-wrap: wrap;
    }
    .title{
      margin: 0; font-size: 18pt; font-weight: 800; line-height: 1.2; color: var(--text);
    }
    .sub{
      margin: 0; font-size: 11pt; color: var(--muted);
    }

    /* ===== Tarjeta del gráfico ===== */
    .chart-card{
      background: var(--surface);
      border: 1px solid var(--border);
      border-radius: 12px;
      box-shadow: var(--shadow-sm);
      padding: 16px;
      margin-top: 16px;
    }
    .chart-head{
      display: flex; justify-content: space-between; align-items: center; gap: 12px; margin-bottom: 8px;
    }
    .legend{ display: inline-flex; gap: 12px; align-items: center; font-size: 10pt; color: var(--muted); }
    .legend-item{ display: inline-flex; gap: 6px; align-items: center; }
    .legend-swatch{ width: 12px; height: 12px; border-radius: 3px; display: inline-block; }

    /* ===== Tabla resumen ===== */
    .table-card{
      background: #FFFFFF;
      border: 1px solid var(--border);
      border-radius: 12px; box-shadow: var(--shadow-sm);
      padding: 12px; margin-top: 14px;
    }
    table{ width: 100%; border-collapse: collapse; font-size: 10.5pt; }
    thead th{
      text-align: left; font-weight: 700; color: var(--muted);
      border-bottom: 1px solid var(--border); padding: 10px 8px;
    }
    tbody td{ padding: 10px 8px; border-bottom: 1px solid var(--border); }
    .td-money{ text-align: right; white-space: nowrap; font-variant-numeric: tabular-nums; }
    .pos{ color: var(--green); font-weight: 700; }
    .neg{ color: var(--red); font-weight: 700; }
    .net{ color: var(--accent); font-weight: 800; }

    /* Accesibilidad */
    .sr-only{
      position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0;
    }
  </style>
</head>
<body>
  <div class="page">
    <!-- ===== Cabecera ===== -->
    <header class="header" role="banner">
      <h1 class="title"><%= reportTitle %></h1>
      <p class="sub">Año: <%= year %></p>
    </header>

    <!-- ===== Helpers EJS ===== -->
    <%
      // Formateo de moneda
      const _locale = 'es-ES';
      const _currency = (typeof currency !== 'undefined' && currency) ? currency : 'EUR';
      const money = (n) => {
        try {
          return new Intl.NumberFormat(_locale, { style: 'currency', currency: _currency, minimumFractionDigits: 0, maximumFractionDigits: 0 }).format(n);
        } catch {
          const sign = (n < 0) ? '-' : '';
          const abs = Math.abs(Number(n) || 0).toFixed(0).replace('.', ',');
          return sign + abs + ' ' + _currency;
        }
      };

      // Datos mensuales y orden canónico
      const raw = Array.isArray(monthlyData) ? monthlyData : [];
      const canonical = ['Ene','Feb','Mar','Abr','May','Jun','Jul','Ago','Sep','Oct','Nov','Dic'];
      const norm = (m) => String(m || '').slice(0,3).toLowerCase();

      const indexByMonth = new Map();
      raw.forEach((d) => { indexByMonth.set(norm(d.month), d); });

      const months = canonical.map(m => {
        const found = indexByMonth.get(norm(m));
        return {
          month: m,
          income: Number(found?.income) || 0,
          expense: Number(found?.expense) || 0
        };
      });

      // Totales anuales (de props o calculados)
      const calcIncome = months.reduce((a, d) => a + d.income, 0);
      const calcExpense = months.reduce((a, d) => a + d.expense, 0);
      const totalIncome = (typeof annualTotalIncome !== 'undefined' && annualTotalIncome != null) ? Number(annualTotalIncome) : calcIncome;
      const totalExpense = (typeof annualTotalExpense !== 'undefined' && annualTotalExpense != null) ? Number(annualTotalExpense) : calcExpense;
      const netSavings = (typeof annualNetSavings !== 'undefined' && annualNetSavings != null) ? Number(annualNetSavings) : (totalIncome - totalExpense);

      // Escalado para el gráfico
      const maxVal = Math.max(1,
        ...months.map(d => Math.max(d.income, d.expense))
      );

      // Ticks "bonitos"
      function niceStep(max){
        const raw = max / 4;
        const pow = Math.pow(10, Math.floor(Math.log10(raw)));
        const n = raw / pow;
        let s = 1;
        if (n <= 1) s = 1;
        else if (n <= 2) s = 2;
        else if (n <= 5) s = 5;
        else s = 10;
        return s * pow;
      }
      const step = niceStep(maxVal);
      const tickCount = Math.max(4, Math.ceil(maxVal / step));
      const tickMax = step * tickCount;

      // Dimensiones del SVG
      const SVG_W = 760, SVG_H = 320;
      const M_LEFT = 56, M_RIGHT = 12, M_TOP = 8, M_BOTTOM = 36;
      const CH_W = SVG_W - M_LEFT - M_RIGHT;
      const CH_H = SVG_H - M_TOP - M_BOTTOM;

      // Barras por grupo
      const N = months.length || 12;
      const groupW = CH_W / N;
      const innerRatio = 0.7; // porción de cada grupo ocupada por las barras
      const gap = 8; // espacio entre barra de ingreso y gasto
      const barW = Math.max(6, (groupW * innerRatio - gap) / 2);

      // funciones de escalado
      const yScale = (val) => CH_H * (1 - (val / tickMax)); // 0 en bottom
      const bandX = (i) => M_LEFT + i * groupW + (groupW * (1 - innerRatio) / 2);
    %>

    <!-- ===== Gráfico de barras (SVG) ===== -->
    <section class="chart-card" aria-labelledby="chartTitle">
      <div class="chart-head">
        <h2 id="chartTitle" class="sr-only">Ingresos y gastos mensuales</h2>
        <div class="legend" aria-label="Leyenda del gráfico">
          <span class="legend-item"><span class="legend-swatch" style="background: var(--green)"></span>Ingresos</span>
          <span class="legend-item"><span class="legend-swatch" style="background: var(--red)"></span>Gastos</span>
        </div>
      </div>

      <svg viewBox="0 0 <%= SVG_W %> <%= SVG_H %>" width="100%" height="auto" role="img" aria-label="Gráfico de barras de ingresos y gastos por mes">
        <!-- Grid horizontal y ejes -->
        <g>
          <% for (let i = 0; i <= tickCount; i++){ 
               const val = i * step;
               const y = M_TOP + yScale(val);
          %>
            <line x1="<%= M_LEFT %>" y1="<%= y %>" x2="<%= SVG_W - M_RIGHT %>" y2="<%= y %>"
                  stroke="var(--grid)" stroke-width="1" />
            <text x="<%= M_LEFT - 8 %>" y="<%= y %>" text-anchor="end" dominant-baseline="middle"
                  fill="var(--muted)" font-size="10"><%= money(val) %></text>
          <% } %>
        </g>

        <!-- Barras -->
        <g>
          <% months.forEach((d, i) => {
               const x0 = bandX(i);
               const hIncome = CH_H - yScale(d.income);
               const hExpense = CH_H - yScale(d.expense);
               const yIncome = M_TOP + yScale(d.income);
               const yExpense = M_TOP + yScale(d.expense);
               const xIncome = x0;
               const xExpense = x0 + barW + gap;
          %>
            <!-- Ingresos -->
            <rect x="<%= xIncome %>" y="<%= yIncome %>" width="<%= barW %>" height="<%= hIncome %>"
                  fill="var(--green)" rx="3" ry="3">
              <title><%= d.month %> · Ingresos: <%= money(d.income) %></title>
            </rect>

            <!-- Gastos -->
            <rect x="<%= xExpense %>" y="<%= yExpense %>" width="<%= barW %>" height="<%= hExpense %>"
                  fill="var(--red)" rx="3" ry="3">
              <title><%= d.month %> · Gastos: <%= money(d.expense) %></title>
            </rect>

            <!-- Etiqueta de mes -->
            <text x="<%= x0 + barW + gap/2 %>" y="<%= SVG_H - 16 %>" text-anchor="middle"
                  fill="var(--muted)" font-size="10"><%= d.month %></text>
          <% }); %>
        </g>

        <!-- Línea base del eje X -->
        <line x1="<%= M_LEFT %>" y1="<%= M_TOP + CH_H %>" x2="<%= SVG_W - M_RIGHT %>" y2="<%= M_TOP + CH_H %>"
              stroke="var(--border)" stroke-width="1" />
      </svg>
    </section>

    <!-- ===== Tabla resumen de totales ===== -->
    <section class="table-card" aria-labelledby="summaryTitle">
      <h2 id="summaryTitle" class="sr-only">Totales anuales</h2>
      <table>
        <thead>
          <tr>
            <th scope="col">Concepto</th>
            <th scope="col" class="td-money">Importe</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Ingresos anuales</td>
            <td class="td-money pos"><%= money(totalIncome) %></td>
          </tr>
          <tr>
            <td>Gastos anuales</td>
            <td class="td-money neg"><%= money(totalExpense) %></td>
          </tr>
          <tr>
            <td>Ahorro neto anual</td>
            <td class="td-money net"><%= money(netSavings) %></td>
          </tr>
        </tbody>
      </table>
    </section>
  </div>
</body>
</html>
