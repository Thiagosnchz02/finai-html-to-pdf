<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <title><%= analysisTitle %> · FinAi</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <style>
    /* ===== Base (modo claro, A4, tipografía) ===== */
    @page { size: A4; margin: 20mm; }
    :root{
      --bg: #FFFFFF;
      --surface: #F7F8FA;
      --text: #0F172A;
      --muted: #475569;
      --border: #E5E7EB;
      --grid: #EEF1F4;
      --accent: #007AFF;
      --green: #16A34A;
      --red: #FF5A5F;
      --shadow-sm: 0 1px 2px rgba(16,24,40,0.06), 0 1px 3px rgba(16,24,40,0.08);
    }
    *{ box-sizing: border-box; -webkit-print-color-adjust: exact; print-color-adjust: exact; }
    html, body{ height: 100%; }
    body{
      margin: 0;
      background: var(--bg);
      color: var(--text);
      font: 400 11pt/1.55 "Inter", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", "Liberation Sans", Helvetica, sans-serif;
      -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale;
    }

    .page{ max-width: 800px; margin: 0 auto; padding: 8px 0 16px; }

    /* ===== Cabecera ===== */
    .header{
      margin-bottom: 8px; padding-bottom: 10px;
      border-bottom: 1px solid var(--border);
      display: flex; align-items: baseline; justify-content: space-between; gap: 12px; flex-wrap: wrap;
    }
    .title{
      margin: 0; font-size: 18pt; font-weight: 800; line-height: 1.2;
    }
    .subtitle{
      margin: 0; font-size: 11pt; color: var(--muted);
    }

    /* ===== Tarjeta del gráfico ===== */
    .chart-card{
      background: var(--surface);
      border: 1px solid var(--border);
      border-radius: 12px;
      box-shadow: var(--shadow-sm);
      padding: 16px;
      margin-top: 12px;
    }
    .chart-head{
      display: flex; justify-content: space-between; align-items: center; gap: 12px; margin-bottom: 8px;
    }
    .legend{ display: inline-flex; gap: 12px; align-items: center; font-size: 10pt; color: var(--muted); }
    .legend-item{ display: inline-flex; gap: 6px; align-items: center; }
    .legend-swatch{ width: 12px; height: 12px; border-radius: 3px; display: inline-block; }

    /* Accesibilidad */
    .sr-only{
      position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); white-space: nowrap; border: 0;
    }
  </style>
</head>
<body>
  <div class="page">
    <!-- ===== Cabecera ===== -->
    <header class="header" role="banner">
      <h1 class="title"><%= analysisTitle %></h1>
      <p class="subtitle"><%= (typeof period !== 'undefined' && period) ? period : 'Últimos 6 meses' %></p>
    </header>

    <!-- ===== Helpers EJS ===== -->
    <%
      // Formateo de cantidades (sin depender de moneda para este análisis)
      const _locale = 'es-ES';
      const fmt = (n) => {
        try { return new Intl.NumberFormat(_locale, { maximumFractionDigits: 0 }).format(Number(n)||0); }
        catch { return String(Math.round(Number(n)||0)); }
      };

      // Datos de entrada
      const L = Array.isArray(labels) ? labels.map(String) : [];
      const ds = Array.isArray(datasets) ? datasets : [];

      // Detectar series por etiqueta (robusto a orden y mayúsculas)
      const incRaw = ds.find(d => /ingres/i.test(String(d?.label||'')));
      const expRaw = ds.find(d => /gasto/i.test(String(d?.label||'')));
      // Fallback si no se detectan por nombre
      const _inc = incRaw?.data ?? (ds[0]?.data ?? []);
      const _exp = expRaw?.data ?? (ds[1]?.data ?? []);

      // Normalizar longitudes a labels
      const income = L.map((_,i) => Number(_inc[i]) || 0);
      const expense = L.map((_,i) => Number(_exp[i]) || 0);

      // Si no hay labels, generamos placeholders según longitud de series
      const N = L.length || Math.max(income.length, expense.length);
      const months = (L.length ? L : Array.from({length: N}, (_,i)=>`Mes ${i+1}`)).slice(0, N);
      const inc = (income.length ? income : Array.from({length:N},()=>0)).slice(0, N);
      const exp = (expense.length ? expense : Array.from({length:N},()=>0)).slice(0, N);

      // Escala vertical
      const maxVal = Math.max(1, ...inc, ...exp);
      function niceStep(max){
        const raw = max / 4;
        const pow = Math.pow(10, Math.floor(Math.log10(raw)));
        const n = raw / pow;
        let s = 1;
        if (n <= 1) s = 1;
        else if (n <= 2) s = 2;
        else if (n <= 5) s = 5;
        else s = 10;
        return s * pow;
      }
      const step = niceStep(maxVal);
      const tickCount = Math.max(4, Math.ceil(maxVal / step));
      const tickMax = step * tickCount;

      // Dimensiones del SVG
      const SVG_W = 760, SVG_H = 320;
      const M_LEFT = 56, M_RIGHT = 12, M_TOP = 8, M_BOTTOM = 36;
      const CH_W = SVG_W - M_LEFT - M_RIGHT;
      const CH_H = SVG_H - M_TOP - M_BOTTOM;

      // Grupo (mes) y barras
      const groupW = CH_W / N;
      const innerRatio = 0.7;   // parte de cada grupo ocupada por las barras
      const gap = 8;            // separación entre ingresos y gastos
      const barW = Math.max(6, (groupW * innerRatio - gap) / 2);

      // Escalas
      const yScale = (val) => CH_H * (1 - (val / tickMax)); // 0 en bottom
      const bandX = (i) => M_LEFT + i * groupW + (groupW * (1 - innerRatio) / 2);
    %>

    <!-- ===== Gráfico de barras ===== -->
    <section class="chart-card" aria-labelledby="chartTitle">
      <div class="chart-head">
        <h2 id="chartTitle" class="sr-only">Comparativa mensual de ingresos y gastos</h2>
        <div class="legend" aria-label="Leyenda del gráfico">
          <span class="legend-item"><span class="legend-swatch" style="background: var(--green)"></span>Ingresos</span>
          <span class="legend-item"><span class="legend-swatch" style="background: var(--red)"></span>Gastos</span>
        </div>
      </div>

      <svg viewBox="0 0 <%= SVG_W %> <%= SVG_H %>" width="100%" height="auto" role="img" aria-label="Gráfico de barras: ingresos vs gastos por mes">
        <!-- Grid horizontal y ticks -->
        <g>
          <% for (let i = 0; i <= tickCount; i++){ 
               const val = i * step;
               const y = M_TOP + yScale(val);
          %>
            <line x1="<%= M_LEFT %>" y1="<%= y %>" x2="<%= SVG_W - M_RIGHT %>" y2="<%= y %>"
                  stroke="var(--grid)" stroke-width="1" />
            <text x="<%= M_LEFT - 8 %>" y="<%= y %>" text-anchor="end" dominant-baseline="middle"
                  fill="var(--muted)" font-size="10"><%= fmt(val) %></text>
          <% } %>
        </g>

        <!-- Barras por mes -->
        <g>
          <% for (let i=0; i<N; i++){ 
               const x0 = bandX(i);
               // Ingresos
               const yInc = M_TOP + yScale(inc[i]);
               const hInc = CH_H - yScale(inc[i]);
               // Gastos
               const yExp = M_TOP + yScale(exp[i]);
               const hExp = CH_H - yScale(exp[i]);
          %>
            <!-- Ingresos -->
            <rect x="<%= x0 %>" y="<%= yInc %>" width="<%= barW %>" height="<%= hInc %>"
                  fill="var(--green)" rx="3" ry="3">
              <title><%= months[i] %> · Ingresos: <%= fmt(inc[i]) %></title>
            </rect>

            <!-- Gastos -->
            <rect x="<%= x0 + barW + gap %>" y="<%= yExp %>" width="<%= barW %>" height="<%= hExp %>"
                  fill="var(--red)" rx="3" ry="3">
              <title><%= months[i] %> · Gastos: <%= fmt(exp[i]) %></title>
            </rect>

            <!-- Etiqueta de mes -->
            <text x="<%= x0 + barW + gap/2 %>" y="<%= SVG_H - 16 %>" text-anchor="middle"
                  fill="var(--muted)" font-size="10"><%= months[i] %></text>
          <% } %>
        </g>

        <!-- Línea base del eje X -->
        <line x1="<%= M_LEFT %>" y1="<%= M_TOP + CH_H %>" x2="<%= SVG_W - M_RIGHT %>" y2="<%= M_TOP + CH_H %>"
              stroke="var(--border)" stroke-width="1" />
      </svg>
    </section>
  </div>
</body>
</html>
